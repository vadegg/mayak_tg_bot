#!/usr/bin/env python
import config
import telebot
from telebot.types import (
    ReplyKeyboardMarkup,
    ReplyKeyboardHide,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from status import Status

import db
import places

change_category = "‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
send_geo = "üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
contact_us = "üì£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
add_place = "ü§î –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–∞—Ñ–µ"
dont_want_to_suggest = "üò§ –ù–µ —Ö–æ—á—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å"
class Category:
    def __init__(self, name, identificator, number, button_title):
        self.number = number
        self.name = name
        self.button_title = button_title
        self.identificator = identificator

class Categories:

    def __init__(self):
        self.categories_array = []
        self.max_number = 0

    def __iter__(self):
        return iter(self.categories_array)

    def add(self, name, identificator, button_title):
        self.max_number += 1
        self.categories_array.append(
            Category(
                name,
                identificator,
                self.max_number,
                button_title
            )
        )

    def get_elem_by_name(self,name):
        for category in self.categories_array:
            if category.name.lower() == name.lower():
                return category
        return None
    def get_elem_by_buttitle(self, name):
        for category in self.categories_array:
            if category.button_title.lower() == name.lower():
                return category
        return None

categories = Categories()
categories.add(
    name = '–ö–∞—Ñ–µ',
    identificator = 'cafe',
    button_title = '–ö–∞—Ñ–µ ‚òïÔ∏è'
)
categories.add(
    name = '–ë–∞—Ä—ã',
    identificator = 'beauty',
    button_title = '–ë–∞—Ä—ãüçπ'
)
categories.add(
    name = '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
    identificator = 'party',
    button_title = '–†–µ—Å—Ç–æ—Ä–∞–Ω—ãüçî'
)

db_interface = db.DBInterface()
bot_token = config.bot_token
bot = telebot.TeleBot(bot_token)

def log_raw_message(message):
    db_interface.log_message(
        message.chat.id,
        message.text,
        message.date,
        message.chat.first_name,
        message.chat.last_name,
        message.chat.username
    )

def log_location(message):
    db_interface.log_message(
        message.chat.id,
        str(message.location.latitude) + ", " + str(message.location.longitude),
        message.date,
        message.chat.first_name,
        message.chat.last_name,
        message.chat.username
    )

def undefined_error(message):
    bot.send_message(
        message.chat.id,
        'ü§∑ –ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑'
    )
    greetings(message)
def get_location(message, choose):
    keyboard = ReplyKeyboardMarkup(
        row_width=1,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    button_geo = KeyboardButton(
        text= send_geo,
        request_location=True
    )
    button_change_category = KeyboardButton(
        text=change_category
    )

    keyboard.add(button_geo)
    keyboard.add(button_change_category)
    bot.send_message(
        message.chat.id,
        (
        '–ü–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏ –º—ã –ø–æ–∫–∞–∂–µ–º –ª—É—á—à–µ–µ —Ä—è–¥–æ–º üí´'
        ),
        reply_markup=keyboard

    )

def send_contact_info(message):
    bot.send_message(
        message.chat.id,
        ("üì¢ –¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n" +
        "‚òéÔ∏è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: [+79166498288](tel+791664982887)\n" +
        "üìß –ø–æ –ø–æ—á—Ç–µ: gaidukov.artem@me.com\n\n"
        ),
        parse_mode="Markdown"
    )
    bot.send_message(
        message.chat.id,
        ("–ú—ã –ª—é–±–∏–º –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!" +
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –ª—é–±—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏! üòâ"
        ),
        parse_mode="Markdown"
    )
@bot.message_handler(content_types=["location"])
def location_recieved(message):

    status = db_interface.get_status(message.chat.id)
    log_location(message)

    if not Status.was_choosed_smth(status):
        bot.send_message(
            message.chat.id,
            "–Ø —É–∑–Ω–∞—é, –≥–¥–µ —Ç—ã, –ø–æ–∑–∂–µ"
        )
        return

    bot.send_message(
        message.chat.id,
        "–õ—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–±—è:",
        reply_markup=ReplyKeyboardHide()
    )
    db_interface.set_status(
        message.chat.id,
        Status.choosed_to_geo(status)
    )

    places_list = places.get_top_of_places(status, message.location)
    for place in places_list:
        keyboard = InlineKeyboardMarkup()
        callback_button = InlineKeyboardButton(
            text="üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            callback_data="place_{}".format(place[0])
        )
        keyboard.add(callback_button)
        for m in place[1][:-1]:
            bot.send_message(
                message.chat.id,
                m,
                parse_mode = 'Markdown'
            )
        bot.send_message(
            message.chat.id,
            place[1][-1],
            reply_markup=keyboard,
            parse_mode = 'Markdown'
        )

    keyboard = ReplyKeyboardMarkup(
        row_width=1,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    button_change_category = KeyboardButton(
        text=change_category
    )

    keyboard.add(button_change_category)
    bot.send_message(
        message.chat.id,
        (
        '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥ ' +
        '–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        ),
        reply_markup=keyboard

    )

@bot.message_handler(commands=["start"])
def greetings(message, dont_log=False):
    if not dont_log:
        log_raw_message(message)

    db_interface.set_status(
        message.chat.id,
        Status.just_started
    )
    markup = telebot.types.ReplyKeyboardMarkup(
        one_time_keyboard=True,
        resize_keyboard=True
    )
    for c in categories:
        markup.add(c.button_title)

    markup.add(add_place)
    bot.send_message(message.chat.id,
        """–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ò∫Ô∏è

–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å: üçî
–ü—Ä–∏–ø–∏—Ç—å: üçπ
–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ: ‚òïÔ∏è
        """,
        reply_markup=markup
    )

def request_new_places(message):
    send_contact_info(message)
    db_interface.set_status(
        message.chat.id,
        Status.create_status("add_place", "if_want"))
    keyboard = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    keyboard.add(dont_want_to_suggest)
    bot.send_message(
        message.chat.id,
        ("–ê –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–º –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –Ω–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.\n" +
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å"),
        reply_markup=keyboard
    )
@bot.message_handler(content_types=["text"])
def talk(message):
    log_raw_message(message)
    status = db_interface.get_status(message.chat.id) 
    if status == Status.just_started:
        if message.text == add_place:
            request_new_places(message)
            return
        if message.text.strip().lower() == '–±–æ—Ä–¥–µ–ª—å':
            bot.send_message(
                message.chat.id,
                'üëø –ê —Ç—ã –∑—É–±–∫–∏ –ø–æ—á–∏—Å—Ç–∏–ª, –º–∞–ª–µ–Ω—å–∫–∏–π –Ω–µ–≥–æ–¥—è–π?'
            )
            return
        category = categories.get_elem_by_buttitle(message.text)
        if category is not None:
            db_interface.set_status(
                message.chat.id,
                Status.create_choosed_status(category.identificator)
            )
            get_location(message, category.name)
        else:
            undefined_error(message)
    elif (Status.was_choosed_smth(status) or
        Status.was_sent_geo(status)):
        if message.text == change_category:
            db_interface.set_status(
                message.chat.id,
                Status.just_started
            )
            greetings(message)
        else:
            undefined_error(message)
    elif (Status.is_adding_a_place(status)):
        if message.text == dont_want_to_suggest:
            bot.send_message(
                message.chat.id,
                "–ñ–∞–ª—å, –µ—Å–ª–∏ –ø—Ä–∏–¥—É–º–∞–µ—à—å, –ø–∏—à–∏!"
            )
        else:
            bot.send_message(
                -1001329511432,
                ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ:\n\n" +
                "{}").format(message.chat.username, message.text),
                message.text
            )
            bot.send_message(
                message.chat.id,
                "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!"
            )
        greetings(message)

@bot.callback_query_handler(func=lambda call: True)
def choose_place(call):
    if call.message:
        if call.data.startswith("place"):
            place_id = call.data.split('_')[1]
            place_info = db_interface.get_place_by_id(place_id)

            bot.send_message(
                call.message.chat.id,
                "–û—Ç–ª–∏—á–Ω–æ!\n–ó–∞—Ö–æ–¥–∏ –≤ *{}*".format(place_info[1]),
                reply_markup=ReplyKeyboardHide(),
                parse_mode="Markdown"
            )

            keyboard = InlineKeyboardMarkup()
            callback_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ",
                callback_data="start"
            )
            keyboard.add(callback_button)
            bot.send_message(
                call.message.chat.id,
                "–ü–æ –∞–¥—Ä–µ—Å—É _{}_".format(place_info[5]),
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif call.data == 'start':
            greetings(call.message, dont_log=True)

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
